name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v0.1.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

env:
  CARGO_TERM_COLOR: always

jobs:
  # ==================== VALIDATE RELEASE ====================
  validate-release:
    name: ‚úÖ Validate Release
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.validate.outputs.version }}
      tag: ${{ steps.validate.outputs.tag }}
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Validate version format
        id: validate
        run: |
          VERSION="${{ github.event.inputs.version }}"
          
          # Remove 'v' prefix if present and validate format
          if [[ $VERSION =~ ^v?([0-9]+\.[0-9]+\.[0-9]+)(-[a-zA-Z0-9.-]+)?$ ]]; then
            CLEAN_VERSION="${BASH_REMATCH[1]}${BASH_REMATCH[2]}"
            TAG="v${CLEAN_VERSION}"
            echo "version=${CLEAN_VERSION}" >> $GITHUB_OUTPUT
            echo "tag=${TAG}" >> $GITHUB_OUTPUT
            echo "‚úÖ Valid version: ${CLEAN_VERSION}"
            echo "‚úÖ Release tag: ${TAG}"
          else
            echo "‚ùå Invalid version format: ${VERSION}"
            echo "Expected format: v0.1.0 or 0.1.0"
            exit 1
          fi
          
      - name: Check if tag already exists
        run: |
          TAG="${{ steps.validate.outputs.tag }}"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "‚ùå Tag $TAG already exists"
            exit 1
          else
            echo "‚úÖ Tag $TAG is available"
          fi

  # ==================== UPDATE VERSION FILES ====================
  update-version:
    name: üìù Update Version
    runs-on: ubuntu-latest
    needs: [validate-release]
    
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Update version in files
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          # Update pyproject.toml
          sed -i "s/version = \".*\"/version = \"${VERSION}\"/" pyproject.toml
          
          # Update __init__.py
          sed -i "s/__version__ = \".*\"/__version__ = \"${VERSION}\"/" nseekfs/__init__.py
          
          # Update Cargo.toml
          sed -i "s/version = \".*\"/version = \"${VERSION}\"/" Cargo.toml
          
          echo "‚úÖ Updated version to ${VERSION} in all files"
          
      - name: Commit version updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pyproject.toml nseekfs/__init__.py Cargo.toml
          git commit -m "chore: bump version to ${{ needs.validate-release.outputs.version }}"
          git push

  # ==================== RUN FULL TEST SUITE ====================
  test-release:
    name: üß™ Test Release Build
    runs-on: ${{ matrix.os }}
    needs: [update-version]
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.11', '3.12']
        
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main  # Get updated version
          
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install maturin pytest numpy
          
      - name: Build and test package
        run: |
          maturin develop --release
          python -c "
          import nseekfs
          import numpy as np
          print(f'‚úÖ NSeekFS version: {nseekfs.__version__}')
          
          # Quick functionality test
          embeddings = np.random.randn(100, 64).astype(np.float32)
          index = nseekfs.from_embeddings(embeddings)
          results = index.query(embeddings[0], top_k=5)
          assert len(results) == 5
          assert results[0]['idx'] == 0
          print('‚úÖ Release build test passed')
          "

  # ==================== CREATE RELEASE TAG ====================
  create-tag:
    name: üè∑Ô∏è Create Release Tag
    runs-on: ubuntu-latest
    needs: [validate-release, test-release]
    
    outputs:
      tag: ${{ needs.validate-release.outputs.tag }}
      
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Create and push tag
        run: |
          TAG="${{ needs.validate-release.outputs.tag }}"
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Create annotated tag
          git tag -a "$TAG" -m "Release $TAG"
          git push origin "$TAG"
          
          echo "‚úÖ Created and pushed tag: $TAG"

  # ==================== TRIGGER CI PIPELINE ====================
  trigger-ci:
    name: üöÄ Trigger CI Pipeline
    runs-on: ubuntu-latest
    needs: [create-tag]
    
    steps:
      - name: Wait for CI pipeline
        run: |
          echo "üîÑ Tag ${{ needs.create-tag.outputs.tag }} created"
          echo "üöÄ CI/CD pipeline will now automatically:"
          echo "   1. Build wheels for all platforms"
          echo "   2. Run comprehensive tests"
          echo "   3. Upload to Test PyPI"
          echo "   4. Upload to Production PyPI"
          echo "   5. Create GitHub Release"
          echo ""
          echo "üìä Monitor progress at:"
          echo "   https://github.com/${{ github.repository }}/actions"
          
      - name: Repository dispatch
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: release-created
          client-payload: |
            {
              "tag": "${{ needs.create-tag.outputs.tag }}",
              "version": "${{ needs.validate-release.outputs.version }}",
              "prerelease": ${{ github.event.inputs.prerelease }}
            }