[build-system]
requires = ["maturin>=1.2,<2.0"]
build-backend = "maturin"

[project]
name = "nseekfs"
version = "0.1.0"
description = "High-performance vector similarity search engine with Rust backend and Python bindings"
authors = [
    { name = "Diogo Novo", email = "diogonovo@outlook.pt" }
]
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.8"
keywords = [
    "vector-search",
    "semantic-search", 
    "similarity-search",
    "approximate-nearest-neighbors",
    "ann",
    "cosine-similarity",
    "embeddings",
    "machine-learning",
    "ai",
    "rust",
    "pyo3",
    "simd",
    "high-performance",
    "top-k",
    "faiss-alternative"
]
classifiers = [
    # Development Status
    "Development Status :: 4 - Beta",
    
    # Intended Audience
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Information Technology",
    
    # Topic Classification
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Information Analysis", 
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Database :: Database Engines/Servers",
    "Topic :: Text Processing :: Indexing",
    
    # License
    "License :: OSI Approved :: MIT License",
    
    # Programming Languages
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9", 
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Rust",
    "Programming Language :: Python :: Implementation :: CPython",
    
    # Operating Systems
    "Operating System :: OS Independent",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: MacOS",
    
    # Environment
    "Environment :: Console",
    "Environment :: No Input/Output (Daemon)",
    
    # Natural Language
    "Natural Language :: English",
    
    # Typing
    "Typing :: Typed"
]
dependencies = [
    "numpy>=1.21.0,<2.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-benchmark>=4.0.0",
    "maturin>=1.2.0",
    "black>=22.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "build>=0.10.0"
]
test = [
    "pytest>=7.0.0",
    "pytest-benchmark>=4.0.0",
    "scipy>=1.8.0"
]
examples = [
    "matplotlib>=3.5.0",
    "pandas>=1.4.0",
    "jupyter>=1.0.0",
    "sentence-transformers>=2.0.0"
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0"
]

[project.urls]
Homepage = "https://github.com/diogonovo/nseekfs"
Repository = "https://github.com/diogonovo/nseekfs.git"
Documentation = "https://github.com/diogonovo/nseekfs#readme"
"Bug Tracker" = "https://github.com/diogonovo/nseekfs/issues"
"Release Notes" = "https://github.com/diogonovo/nseekfs/blob/main/CHANGELOG.md"
"Source Code" = "https://github.com/diogonovo/nseekfs"

[tool.maturin]
# Maturin-specific configuration for Rust-Python builds
python-source = "."
module-name = "nseekfs.nseekfs"
bindings = "pyo3"

# Build configuration
strip = true
sdist-include = false
exclude = [
    # Rust source code (keep proprietary)
    "src/**/*",
    "Cargo.toml",
    "Cargo.lock",
    "*.rs",
    
    # Development files
    ".git/**",
    ".github/**",
    ".gitignore",
    "target/**",
    ".env*",
    "*.log",
    
    # Test data and artifacts
    "test_data/**",
    "*.csv",
    "*.npy", 
    "*.bin",
    "*.ann",
    "*.tmp",
    
    # Python artifacts
    "__pycache__/**",
    "*.pyc",
    "*.pyo",
    ".pytest_cache/**",
    ".mypy_cache/**",
    "dist/**",
    "build/**",
    "*.egg-info/**",
    
    # IDEs
    ".vscode/**",
    ".idea/**",
    "*.swp",
    "*.swo",
    
    # OS files
    ".DS_Store",
    "Thumbs.db"
]

# Platform-specific builds (mantido para otimizações)
[tool.maturin.target.x86_64-unknown-linux-gnu]
rustflags = ["-C", "target-cpu=native"]

[tool.maturin.target.x86_64-pc-windows-msvc] 
rustflags = ["-C", "target-cpu=native"]

[tool.maturin.target.x86_64-apple-darwin]
rustflags = ["-C", "target-cpu=native"]

[tool.maturin.target.aarch64-apple-darwin]
rustflags = ["-C", "target-cpu=native"]

# Python tooling configuration
[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | target
)/
'''

[tool.ruff]
target-version = "py38"
line-length = 100
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
exclude = [
    ".bzr",
    ".direnv", 
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"examples/*.py" = ["F401", "F841"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "numpy.*",
    "scipy.*",
    "matplotlib.*",
    "pandas.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--disable-warnings"
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "benchmark: marks tests as benchmarks"
]

# Documentation configuration
[tool.sphinx]
source-dir = "docs"
build-dir = "docs/_build"

# Coverage configuration
[tool.coverage.run]
source = ["nseekfs"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Build profiles for different targets
[tool.cibuildwheel]
# Build wheels for CPython 3.8+
build = "cp38-* cp39-* cp310-* cp311-* cp312-*"
skip = "cp36-* cp37-* pp* *-win32 *-manylinux_i686"

# Linux
[tool.cibuildwheel.linux]
before-all = [
    "curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable -y",
    "source ~/.cargo/env"
]
environment = { PATH = "$HOME/.cargo/bin:$PATH" }
repair-wheel-command = "auditwheel repair -w {dest_dir} {wheel}"

# macOS  
[tool.cibuildwheel.macos]
before-all = [
    "curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable -y"
]
environment = { PATH = "$HOME/.cargo/bin:$PATH" }
repair-wheel-command = "delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}"

# Windows
[tool.cibuildwheel.windows]
before-build = [
    "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --default-toolchain stable -y",
    "call %USERPROFILE%\\.cargo\\env.cmd"
]